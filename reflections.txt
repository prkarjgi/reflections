Q What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros of manual commits:
you are more in control of the changes you make.
in case of successive small commits, it becomes very hard to trace errors- this is an issue with Google Docs 

Cons of manual commits:
forgetfulness may cause issues 

Q Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

version control works on projects containing multiple files which are dependent on each other

Google Docs usually just has one file which one can work on independently

Q How can you use the commands git log and git diff to view the history of files?

git log shows history of when commits were made, 
git diff shows the actual change in code between commits

Q How might using version control make you more confident to make changes that could break something?

you can always revert back to a bug free version. taking risks and potentially breaking code isn't scary with version control

Q Now that you have your workspace set up, what do you want to try using Git for?
Adding new files

Q. What happens when you initialize a repository? Why do you need to do it?

Q. How is the staging area different from the working directory and the repository? What value do you think it offers?

Q. How can you use the staging area to make sure you have one commit per logical change?

Q. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Q. How do the diagrams help you visualize the branch structure?

Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Q. What are the pros and cons of Git's automatic merging vs. always doing merges manually?
